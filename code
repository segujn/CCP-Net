import torch
import torch.nn as nn
import torch.nn.functional as F

class MultiHeadSelfAttention(nn.Module):
    def __init__(self, input_dim, output_dim, num_heads):
        super(MultiHeadSelfAttention, self).__init__()
        self.num_heads = num_heads
        self.output_dim = output_dim
        
        self.query_linear = nn.Linear(input_dim, output_dim)
        self.key_linear = nn.Linear(input_dim, output_dim)
        self.value_linear = nn.Linear(input_dim, output_dim)
        self.final_linear = nn.Linear(output_dim, output_dim)
        self.layer_norm = nn.LayerNorm(output_dim)

    def forward(self, x):
        batch_size, seq_length, _ = x.size()
        
        queries = self.query_linear(x)
        keys = self.key_linear(x)
        values = self.value_linear(x)

        queries = queries.view(batch_size, seq_length, self.num_heads, self.output_dim // self.num_heads)
        keys = keys.view(batch_size, seq_length, self.num_heads, self.output_dim // self.num_heads)
        values = values.view(batch_size, seq_length, self.num_heads, self.output_dim // self.num_heads)

        queries = queries.permute(0, 2, 1, 3)  
        keys = keys.permute(0, 2, 1, 3)
        values = values.permute(0, 2, 1, 3)

        attention_scores = torch.matmul(queries, keys.transpose(-1, -2)) / (self.output_dim ** 0.5)
        attention_weights = F.softmax(attention_scores, dim=-1)

        attention_output = torch.matmul(attention_weights, values)
        attention_output = attention_output.permute(0, 2, 1, 3).contiguous()  
        attention_output = attention_output.view(batch_size, seq_length, self.output_dim)

        attention_output = self.layer_norm(attention_output + x)
        
        return self.final_linear(attention_output)

class BiLSTM(nn.Module):
    def __init__(self, input_dim, hidden_dim, num_layers=1):
        super(BiLSTM, self).__init__()
        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers=num_layers, bidirectional=True, batch_first=True)

    def forward(self, x):
        lstm_out, _ = self.lstm(x)
        return lstm_out

class CCPNet(nn.Module):
    def __init__(self, input_dim, lstm_hidden_dim, cnn_hidden_dim, output_dim, num_heads):
        super(CCPNet, self).__init__()
        self.attention = MultiHeadSelfAttention(input_dim, lstm_hidden_dim, num_heads)
        
        self.bilstm = BiLSTM(lstm_hidden_dim, lstm_hidden_dim)
        
        self.fc_layer = nn.Linear(lstm_hidden_dim * 2, cnn_hidden_dim)
        
        self.cnn1 = nn.Conv1d(cnn_hidden_dim, cnn_hidden_dim, kernel_size=5, padding=2)
        self.cnn2 = nn.Conv1d(cnn_hidden_dim, output_dim, kernel_size=3, padding=2)

        self.fc = nn.Linear(output_dim, output_dim)

    def forward(self, x):
        attention_out = self.attention(x)
        lstm_out = self.bilstm(attention_out)
        lstm_out = lstm_out.permute(0, 2, 1) 
        fc_out = self.fc_layer(lstm_out) 
        fc_out = fc_out.permute(0, 2, 1)
        cnn_out1 = self.cnn1(fc_out)
        cnn_out1 = F.relu(cnn_out1)
        cnn_out2 = self.cnn2(cnn_out1)
        cnn_out2 = F.relu(cnn_out2)
        output = self.fc(cnn_out2.mean(dim=2))
        return output
